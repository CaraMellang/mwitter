{"version":3,"sources":["fbase.js","routes/Profile.js","components/AuthForm.js","routes/Auth.js","components/Mweet.js","components/MweetFactory.js","routes/Home.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","Profile","userObj","refreshUser","history","useHistory","useState","displayName","newDisplayName","setNewDisplayName","getMyMweets","a","collection","where","uid","orderBy","get","mweets","console","log","docs","map","doc","data","useEffect","onSubmit","e","preventDefault","updateProfile","className","type","placeholder","onChange","value","target","autoFocus","style","marginTop","onClick","signOut","push","AuthForm","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","event","name","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","required","prev","backgroundColor","border","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","marginBottom","faGoogle","faGithub","Mweet","mweetObj","isOwner","editing","setEditing","text","newMweet","setNewMweet","onDeleteClick","window","confirm","id","delete","refFromURL","attachmentUrl","toggleEditing","update","src","faTrash","faPencilAlt","MweetFactory","mweet","setMweet","attachment","setAttachment","attachmentRef","ref","child","uuidv4","putString","response","getDownloadURL","createAt","Date","now","creatorId","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","setMweets","onSnapshot","snap","mweetArray","m","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedin","width","margin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","updataProfile","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAcAA,IAASC,cATY,CACnBC,OAAQC,0CACRC,WAAYD,gCACZE,UAAWF,gBACXG,cAAeH,4BACfI,kBAAmBJ,eACnBK,MAAOL,8CAKF,IAAMM,EAAmBT,IAEnBU,EAAcV,IAASW,OACvBC,EAAYZ,IAASa,YACrBC,EAAiBd,IAASe,U,OCmDxBC,EAnEC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,YACpBC,EAAUC,cAChB,EAA4CC,mBAASJ,EAAQK,aAA7D,mBAAOC,EAAP,KAAuBC,EAAvB,KAQMC,EAAW,uCAAG,4BAAAC,EAAA,sEACGd,EAClBe,WAAW,UACXC,MAAM,YAAa,KAAMX,EAAQY,KACjCC,QAAQ,aACRC,MALe,OACZC,EADY,OAQlBC,QAAQC,IAAIF,EAAOG,KAAKC,KAAI,SAACC,GAAD,OAASA,EAAIC,WARvB,2CAAH,qDAUjBC,qBAAU,WACRd,MACC,IAEH,IAOMe,EAAQ,uCAAG,WAAOC,GAAP,SAAAf,EAAA,yDACfe,EAAEC,iBACEzB,EAAQK,cAAgBC,EAFb,gCAGPN,EAAQ0B,cAAc,CAG1BrB,YAAaC,IANF,OAQbL,IARa,2CAAH,sDAWd,OACE,sBAAK0B,UAAU,YAAf,UACE,uBAAMJ,SAAUA,EAAUI,UAAU,cAApC,UACE,uBACEC,KAAK,OACLC,YAAY,eACZC,SAxBS,SAACN,GAChB,IACYO,EACRP,EADFQ,OAAUD,MAEZxB,EAAkBwB,IAqBZA,MAAOzB,EACP2B,WAAS,EACTN,UAAU,cAEZ,uBACEC,KAAK,SACLG,MAAM,iBACNJ,UAAU,UACVO,MAAO,CAAEC,UAAW,SAGxB,sBAAMC,QAzDY,WACpB3C,EAAY4C,UACZnC,EAAQoC,KAAK,KAGbrC,KAoDgC0B,UAAU,2BAAxC,yBCgBSY,EA7EE,WACf,MAA0BnC,mBAAS,IAAnC,mBAAOoC,EAAP,KAAcC,EAAd,KACA,EAAgCrC,mBAAS,IAAzC,mBAAOsC,EAAP,KAAiBC,EAAjB,KACA,EAAoCvC,oBAAS,GAA7C,mBAAOwC,EAAP,KAAmBC,EAAnB,KACA,EAA0BzC,mBAAS,IAAnC,mBAAO0C,EAAP,KAAcC,EAAd,KAEMjB,EAAW,SAACkB,GAChB,MAEIA,EADFhB,OAAUiB,EADZ,EACYA,KAAMlB,EADlB,EACkBA,MAEL,UAATkB,EACFR,EAASV,GACS,aAATkB,GACTN,EAAYZ,IAGVR,EAAQ,uCAAG,WAAOyB,GAAP,eAAAvC,EAAA,yDACfuC,EAAMvB,iBADS,UAITmB,EAJS,gCAMEnD,EAAYyD,+BACvBV,EACAE,GARS,OAMXrB,EANW,+CAYE5B,EAAY0D,2BAA2BX,EAAOE,GAZhD,QAYXrB,EAZW,eAcbL,QAAQC,IAAII,GAdC,kDAgBb0B,EAAS,KAAEK,SAhBE,0DAAH,sDAsBd,OACE,qCACE,uBAAM7B,SAAUA,EAAUI,UAAU,YAApC,UACE,uBACEsB,KAAK,QACLrB,KAAK,QACLC,YAAY,QACZwB,UAAQ,EACRtB,MAAOS,EACPV,SAAUA,EACVH,UAAU,cAEZ,uBACEsB,KAAK,WACLrB,KAAK,WACLC,YAAY,WACZwB,UAAQ,EACRtB,MAAOW,EACPZ,SAAUA,EACVH,UAAU,cAEZ,uBACEC,KAAK,SACLD,UAAU,uBACVI,MAAOa,EAAa,iBAAmB,UAExCE,GAAS,sBAAMnB,UAAU,YAAhB,SAA6BmB,OAEzC,sBACEV,QAhCgB,kBAAMS,GAAc,SAACS,GAAD,OAAWA,MAiC/C3B,UAAU,aACVO,MAAO,CAAEqB,gBAAiB,OAAQC,OAAQ,SAH5C,SAKGZ,EAAa,UAAY,gB,gBCjCnBa,EApCF,WACX,IAAMC,EAAa,uCAAG,WAAOV,GAAP,mBAAAvC,EAAA,4DAKP,YAHDwC,EACRD,EADFhB,OAAUiB,MAIVU,EAAW,IAAInE,EAAiBE,KAAKkE,mBACnB,WAATX,IACTU,EAAW,IAAInE,EAAiBE,KAAKmE,oBARnB,SAUDpE,EAAYqE,gBAAgBH,GAV3B,OAUdtC,EAVc,OAWpBL,QAAQC,IAAII,GAXQ,2CAAH,sDAcnB,OACE,sBAAKM,UAAU,gBAAf,UACE,cAAC,IAAD,CACAoC,KAAMC,IACNC,MAAO,UACPC,KAAK,KACLhC,MAAO,CAACiC,aAAa,MAErB,cAAC,EAAD,IACA,sBAAKxC,UAAU,UAAf,UACE,yBAAQS,QAASsB,EAAeT,KAAK,SAAStB,UAAU,UAAxD,kCACuB,cAAC,IAAD,CAAiBoC,KAAMK,SAE9C,yBAAQhC,QAASsB,EAAeT,KAAK,SAAStB,UAAU,UAAxD,kCACuB,cAAC,IAAD,CAAiBoC,KAAMM,gB,gBCyCvCC,EAtED,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QACzB,EAA8BpE,oBAAS,GAAvC,mBAAOqE,EAAP,KAAgBC,EAAhB,KACA,EAAgCtE,mBAASmE,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAa,uCAAG,sBAAArE,EAAA,0DACTsE,OAAOC,QAAQ,uBADN,gCAGZrF,EAAUyB,IAAV,iBAAwBmD,EAASU,KAAMC,SAH3B,uBAKZrF,EAAesF,WAAWZ,EAASa,eAAeF,SALtC,2CAAH,qDASbG,EAAgB,WACpBX,GAAW,SAACpB,GAAD,OAAWA,MAQlB/B,EAAQ,uCAAG,WAAOyB,GAAP,SAAAvC,EAAA,6DACfuC,EAAMvB,iBADS,SAET9B,EAAUyB,IAAV,iBAAwBmD,EAASU,KAAMK,OAAO,CAElDX,KAAMC,IAJO,OAMfF,GAAW,GANI,2CAAH,sDAQd,OACE,qBAAK/C,UAAU,QAAf,SACG8C,EACC,qCACE,uBAAMlD,SAAUA,EAAUI,UAAU,sBAApC,UACE,uBACEC,KAAK,OACLG,MAAO6C,EACP/C,YAAY,kBACZC,SAvBK,SAACkB,GAChB,IACYjB,EACRiB,EADFhB,OAAUD,MAEZ8C,EAAY9C,IAoBFsB,UAAQ,EACRpB,WAAS,EACTN,UAAU,cAEZ,uBAAOC,KAAK,SAASG,MAAM,eAAeJ,UAAU,eAEtD,wBAAQS,QAASiD,EAAe1D,UAAU,oBAA1C,uBAKF,qCACE,6BAAK4C,EAASI,OACbJ,EAASa,eAAiB,qBAAKG,IAAKhB,EAASa,gBAE7CZ,GACC,sBAAK7C,UAAU,iBAAf,UACE,sBAAMS,QAAS0C,EAAf,SACE,cAAC,IAAD,CAAiBf,KAAMyB,QAEzB,sBAAMpD,QAASiD,EAAf,SACE,cAAC,IAAD,CAAiBtB,KAAM0B,iB,QCuCxBC,EAlGM,SAAC,GAAiB,IAAf1F,EAAc,EAAdA,QACtB,EAA0BI,mBAAS,IAAnC,mBAAOuF,EAAP,KAAcC,EAAd,KACA,EAAoCxF,mBAAS,IAA7C,mBAAOyF,EAAP,KAAmBC,EAAnB,KAOMvE,EAAQ,uCAAG,WAAOyB,GAAP,qBAAAvC,EAAA,yDACD,KAAVkF,EADW,oDAIf3C,EAAMvB,iBACF2D,EAAgB,GACD,KAAfS,EANW,wBAOPE,EAAgBlG,EACnBmG,MACAC,MAFmB,UAEVjG,EAAQY,IAFE,YAEKsF,gBATd,SAUUH,EAAcI,UAAUN,EAAY,YAV9C,cAUPO,EAVO,iBAWSA,EAASJ,IAAIK,iBAXtB,QAWbjB,EAXa,sBAcTb,EAAW,CACfI,KAAMgB,EACNW,SAAUC,KAAKC,MACfC,UAAWzG,EAAQY,IACnBwE,iBAlBa,UAoBTzF,EAAUe,WAAW,UAAUgG,IAAInC,GApB1B,QAqBfqB,EAAS,IACTE,EAAc,IAtBC,4CAAH,sDAoDd,OACE,uBAAMvE,SAAUA,EAAUI,UAAU,cAApC,UACE,sBAAKA,UAAU,0BAAf,UACE,uBACEC,KAAK,OACLC,YAAY,sBACZ8E,UAAW,IACX5E,MAAO4D,EACP7D,SAlES,SAACN,GAChB,IACYO,EACRP,EADFQ,OAAUD,MAEZ6D,EAAS7D,IA+DHJ,UAAU,wBAEZ,uBAAOC,KAAK,SAASG,MAAM,SAASJ,UAAU,2BAEhD,wBAAOiF,IAAI,cAAcjF,UAAU,sBAAnC,UACE,8CACA,cAAC,IAAD,CAAiBoC,KAAM8C,SAEzB,uBACE5B,GAAG,cACHrD,KAAK,OACLkF,OAAO,UACPhF,SAxCe,SAACkB,GAEpB,IAGM+D,EADF/D,EADFhB,OAAUgF,MAEU,GAChBC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,SAACC,GAElB,IACmBC,EACfD,EADFE,cAAiBD,OAEnBrG,QAAQC,IAAImG,GACZtB,EAAcuB,IAEhBJ,EAAOM,cAAcR,IA0BjB7E,MAAO,CAAEsF,QAAS,KAEnB3B,GACC,sBAAKlE,UAAU,0BAAf,UACE,qBAAK4D,IAAKM,EAAY3D,MAAO,CAAEuF,gBAAiB5B,KAChD,sBAAKlE,UAAU,qBAAqBS,QA5BlB,kBAAM0D,EAAc,KA4BtC,UACE,0CACA,cAAC,IAAD,CAAiB/B,KAAM2D,gBC3DpBC,EAhCF,SAAC,GAAiB,IAAf3H,EAAc,EAAdA,QACd,EAA4BI,mBAAS,IAArC,mBAAOW,EAAP,KAAe6G,EAAf,KAeA,OAbAtG,qBAAU,WAER3B,EAAUe,WAAW,UAAUmH,YAAW,SAACC,GAEzC,IAAMC,EAAaD,EAAK5G,KAAKC,KAAI,SAACC,GAAD,oBAC/B6D,GAAI7D,EAAI6D,IACL7D,EAAIC,WAETuG,EAAUG,GACV/G,QAAQC,IAAI8G,QAEb,IAGD,sBAAKpG,UAAU,YAAf,UACE,cAAC,EAAD,CAAc3B,QAASA,IACvB,qBAAKkC,MAAO,CAACC,UAAU,IAAvB,SACGpB,EAAOI,KAAI,SAAC6G,GAAD,OACV,cAAC,EAAD,CAEEzD,SAAUyD,EACVxD,QAASwD,EAAEvB,YAAczG,EAAQY,KAF5BoH,EAAE/C,aCYJgD,EAjCI,SAAC,GAAiB,IAAfjI,EAAc,EAAdA,QACpB,OACE,8BACE,qBAAIkC,MAAO,CAAEgG,QAAS,OAAQC,eAAgB,SAAUhG,UAAW,IAAnE,UACE,6BACE,cAAC,IAAD,CAAMiG,GAAG,IAAIlG,MAAO,CAAEmG,YAAa,IAAnC,SACE,cAAC,IAAD,CAAiBtE,KAAMC,IAAWC,MAAO,UAAWC,KAAK,WAG7D,6BACE,eAAC,IAAD,CACEkE,GAAG,WACHlG,MAAO,CACLoG,WAAY,GACZJ,QAAS,OACTK,cAAe,SACfC,WAAY,SACZC,SAAU,IAPd,UAUE,cAAC,IAAD,CAAiB1E,KAAM2E,IAAQzE,MAAO,UAAWC,KAAK,OACtD,sBAAMhC,MAAO,CAAEC,UAAW,IAA1B,SACGnC,EAAQK,YAAR,UACML,EAAQK,YADd,kBAEG,uBCgBHsI,EAlCG,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,WAAY5I,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,YACxC,OACE,eAAC,IAAD,WACG2I,GAAc,cAAC,EAAD,CAAY5I,QAASA,IACpC,cAAC,IAAD,UACG4I,EACC,sBACE1G,MAAO,CACL2G,MAAO,OACPX,QAAS,OACTC,eAAgB,SAChBW,OAAQ,IACR3G,UAAW,IANf,UASE,cAAC,IAAD,CAAO4G,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,CAAMhJ,QAASA,MAEjB,cAAC,IAAD,CAAO+I,OAAK,EAACC,KAAK,WAAlB,SACE,cAAC,EAAD,CAAShJ,QAASA,EAASC,YAAaA,SAM5C,cAAC,IAAD,CAAO8I,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,YCoBGC,MAtDf,WACE,MAAwB7I,oBAAS,GAAjC,mBAAO8I,EAAP,KAAaC,EAAb,KAEA,EAA8B/I,mBAAS,MAAvC,mBAAOJ,EAAP,KAAgBoJ,EAAhB,KAoCA,OAnCA9H,qBAAU,WACR7B,EAAY4J,oBAAmB,SAACC,GAK5BF,EAHEE,EAGS,CACTjJ,YAAaiJ,EAAKjJ,YAClBO,IAAK0I,EAAK1I,IACVc,cAAe,SAAC6H,GAAD,OAAUD,EAAK5H,cAAc6H,KAInC,MAKbJ,GAAQ,QAET,IAgBD,mCACGD,EACC,cAAC,EAAD,CACEjJ,YAjBY,WAClBe,QAAQC,IAAIxB,EAAY+J,aAIxB,IAAMF,EAAO7J,EAAY+J,YACzBJ,EAAW,CACT/I,YAAaiJ,EAAKjJ,YAClBO,IAAK0I,EAAK1I,IACV6I,cAAe,SAACF,GAAD,OAAUD,EAAK5H,cAAc6H,OASxCX,WAAYc,QAAQ1J,GACpBA,QAASA,IAGX,qB,MC/CR2J,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e63aadc7.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\"; //auth구현시 임포트 필요\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nvar firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();\r\n","import { authService, dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nconst Profile = ({ userObj, refreshUser }) => {\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n    // 이친구는 클라이언트단에서 url을 변경한 것 \"처럼\"보이게함\r\n    // window.location.replace(\"/\"); //따라서 리프레쉬하는 이걸사용\r\n    refreshUser(); //상태를 업데이트 함으로 컨포넌트 리렌더링\r\n  };\r\n  const getMyMweets = async () => {\r\n    const mweets = await dbService\r\n      .collection(\"mweets\")\r\n      .where(\"creatorId\", \"==\", userObj.uid)\r\n      .orderBy(\"createdAt\")\r\n      .get();\r\n    //where은 데이터를 필터링해서 get()으로 데이터를 가져옴\r\n    //orderBy는 firebase가 nosql기반이라 인덱스를 만들고 작동해야함(쿼리를 실행할수 있도록)\r\n    console.log(mweets.docs.map((doc) => doc.data()));\r\n  };\r\n  useEffect(() => {\r\n    getMyMweets();\r\n  }, []);\r\n\r\n  const onChange = (e) => {\r\n    const {\r\n      target: { value },\r\n    } = e;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        //updeteProfile은 displayname이랑 photoUrl만 바꿀수있음\r\n        //(다른것도 쓰려면 다른 메소드 써야함)\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Display name\"\r\n          onChange={onChange}\r\n          value={newDisplayName}\r\n          autoFocus\r\n          className=\"formInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Update Profile\"\r\n          className=\"formBtn\"\r\n          style={{ marginTop: 10 }}\r\n        />\r\n      </form>\r\n      <span onClick={onLogOutClick} className=\"formBtn cancelBtn logOut\">\r\n        Log Out\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React, { useState } from \"react\";\r\nimport { authService } from \"fbase\";\r\n\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        //create accrount\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        //login\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n      console.log(data);\r\n    } catch (e) {\r\n      setError(e.message);\r\n    }\r\n  };\r\n  const toggleAccount = () => setNewAccount((prev) => !prev); //이전값의 반대값으로 리턴\r\n  //리액트는 setnames()에 매개를 함수형태로 작성하면\r\n  // prev(변수)로 전달된 이전값에 접근하게 해줌\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit} className=\"container\">\r\n        <input\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          className=\"authInput authSubmit\"\r\n          value={newAccount ? \"Create Account\" : \"Login\"}\r\n        />\r\n        {error && <span className=\"authError\">{error}</span>}\r\n      </form>\r\n      <span\r\n        onClick={toggleAccount}\r\n        className=\"authSwitch\"\r\n        style={{ backgroundColor: \"aqua\", border: \"solid\" }}\r\n      >\r\n        {newAccount ? \"sign in\" : \"sign up\"}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import { authService, firebaseInstance } from \"fbase\";\r\nimport React from \"react\";\r\nimport AuthForm from \"../components/AuthForm\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter,faGoogle,faGithub, faGit } from \"@fortawesome/free-brands-svg-icons\";\r\nconst Auth = () => {\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n    if (name === \"google\") {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === \"github\") {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    const data = await authService.signInWithPopup(provider);\r\n    console.log(data);\r\n  };\r\n\r\n  return (\r\n    <div className=\"authContainer\">\r\n      <FontAwesomeIcon\r\n      icon={faTwitter}\r\n      color={\"#04AAFF\"}\r\n      size=\"3x\"\r\n      style={{marginBottom:30}}\r\n      />\r\n      <AuthForm />\r\n      <div className=\"authBtn\">\r\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n          Continue with Google <FontAwesomeIcon icon={faGoogle}/>\r\n        </button>\r\n        <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import { dbService, storageService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Mweet = ({ mweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [newMweet, setNewMweet] = useState(mweetObj.text);\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"진짜루?\");\r\n    if (ok) {\r\n      await dbService.doc(`mweets/${mweetObj.id}`).delete();\r\n      //doc()의 documentpath인자는 데이터베이스의 폴더형식으로\r\n      await storageService.refFromURL(mweetObj.attachmentUrl).delete();\r\n      //스토리지에 있는 사진삭제\r\n    }\r\n  };\r\n  const toggleEditing = () => {\r\n    setEditing((prev) => !prev);\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewMweet(value);\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await dbService.doc(`mweets/${mweetObj.id}`).update({\r\n      //업데이트는 객체로\r\n      text: newMweet,\r\n    });\r\n    setEditing(false);\r\n  };\r\n  return (\r\n    <div className=\"mweet\">\r\n      {editing ? (\r\n        <>\r\n          <form onSubmit={onSubmit} className=\"container mweetEdit\">\r\n            <input\r\n              type=\"text\"\r\n              value={newMweet}\r\n              placeholder=\"Edit your mweet\"\r\n              onChange={onChange}\r\n              required\r\n              autoFocus\r\n              className=\"formInput\"\r\n            />\r\n            <input type=\"submit\" value=\"Update Mweet\" className=\"formBtn\" />\r\n          </form>\r\n          <button onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n            cancel\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{mweetObj.text}</h4>\r\n          {mweetObj.attachmentUrl && <img src={mweetObj.attachmentUrl} />}\r\n\r\n          {isOwner && (\r\n            <div className=\"mweet__actions\">\r\n              <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </span>\r\n              <span onClick={toggleEditing}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Mweet;\r\n","import React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst MweetFactory = ({ userObj }) => {\r\n  const [mweet, setMweet] = useState(\"\");\r\n  const [attachment, setAttachment] = useState(\"\");\r\n  const onChange = (e) => {\r\n    const {\r\n      target: { value },\r\n    } = e;\r\n    setMweet(value);\r\n  };\r\n  const onSubmit = async (event) => {\r\n    if (mweet === \"\") {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    let attachmentUrl = \"\";\r\n    if (attachment !== \"\") {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`); //파일에 대한 reference로 참조\r\n      const response = await attachmentRef.putString(attachment, \"data_url\");\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n      //getDownloadURL은 promise를 리턴(promise는 쉽게말해 기다리라는 의미)\r\n    }\r\n    const mweetObj = {\r\n      text: mweet,\r\n      createAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl,\r\n    };\r\n    await dbService.collection(\"mweets\").add(mweetObj);\r\n    setMweet(\"\");\r\n    setAttachment(\"\");\r\n\r\n    // await dbService.collection(\"mweets\").add({\r\n    //   //promise를 리턴하므로 async 사용\r\n    //   // mweet, //다큐먼트의 키. mweet: mweet 변수명과 밸류가 같으면 한단어로 생략\r\n    //   text: mweet,\r\n    //   createAt: Date.now(),\r\n    //   creatorId: userObj.uid,\r\n    // });\r\n    // setMweet(\"\");\r\n  };\r\n  const onFileChange = (event) => {\r\n    // console.log(event.target.files);\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const theFile = files[0];\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      // 파일 로딩이 끝나면 finishedEvent를 받음(onloadend)\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      console.log(finishedEvent);\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile); //파일 데이터를 얻음(result가 이미지 데이터(currnetTarget -> result))\r\n  };\r\n\r\n  const onClearAttachment = () => setAttachment(\"\");\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"what's on your mind\"\r\n          maxLength={120}\r\n          value={mweet}\r\n          onChange={onChange}\r\n          className=\"factoryInput__input\"\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n      </div>\r\n      <label for=\"attach-file\" className=\"factoryInput__label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n      <input\r\n        id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"imaga/*\"\r\n        onChange={onFileChange}\r\n        style={{ opacity: 0 }}\r\n      />\r\n      {attachment && (\r\n        <div className=\"factoryForm__attachment\">\r\n          <img src={attachment} style={{ backgroundImage: attachment }} />\r\n          <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n            <span>Remove</span>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MweetFactory;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport Mweet from \"../components/Mweet\";\r\nimport MweetFactory from \"../components/MweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [mweets, setMweets] = useState([]);\r\n\r\n  useEffect(() => {\r\n    //useEffect는 컴포넌트가 mount될 때 실행(클래스 didmount)\r\n    dbService.collection(\"mweets\").onSnapshot((snap) => {\r\n      //onsnapshot은 리스너로, DB를 실시간 감지해서 변화가있으면 자동호출\r\n      const mweetArray = snap.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setMweets(mweetArray);\r\n      console.log(mweetArray);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <MweetFactory userObj={userObj} />\r\n      <div style={{marginTop:30}}>\r\n        {mweets.map((m) => (\r\n          <Mweet\r\n            key={m.id}\r\n            mweetObj={m}\r\n            isOwner={m.creatorId === userObj.uid}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => {\r\n  return (\r\n    <nav>\r\n      <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n        <li>\r\n          <Link to=\"/\" style={{ marginRight: 10 }}>\r\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link\r\n            to=\"/profile\"\r\n            style={{\r\n              marginLeft: 10,\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n              fontSize: 12,\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n            <span style={{ marginTop: 10 }}>\r\n              {userObj.displayName\r\n                ? `${userObj.displayName}의 profile`\r\n                : \"Profile\"}\r\n            </span>\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  HashRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport Profile from \"routes/Profile\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nconst AppRouter = ({ isLoggedin, userObj, refreshUser }) => {\r\n  return (\r\n    <Router>\r\n      {isLoggedin && <Navigation userObj={userObj} />}\r\n      <Switch>\r\n        {isLoggedin ? (\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              margin: \"0\",\r\n              marginTop: 80,\r\n            }}\r\n          >\r\n            <Route exact path=\"/\">\r\n              <Home userObj={userObj} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile userObj={userObj} refreshUser={refreshUser} />\r\n            </Route>\r\n            {/* <Redirect from=\"*\" to=\"/\" />\r\n            이외의 다른 url 주소를 \"/\"로 리다이렉트함 */}\r\n          </div>\r\n        ) : (\r\n          <Route exact path=\"/\">\r\n            <Auth />\r\n          </Route>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"./Router\";\nimport { authService } from \"../fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  // const [isLoggedin, setIsLoggedin] = useState(authService.currentUser); //유저 로그인 여부 확인가능\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      //authservice가 바뀌면 유져상태체인지가 호출(로그인,로그아웃시 호출)\n      if (user) {\n        // setIsLoggedin(true);\n        // setUserObj(user); // 유저값을 넣음\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        //얘 쓰면 리프레쉬 없이 바로 로그아웃\n        setUserObj(null);\n      }\n      // else {\n      //   setIsLoggedin(false);\n      // }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    console.log(authService.currentUser);\n    //데이터가 크므로 리액트가 판단하기 복잡해서 바로 변화가 이뤄지지못함\n    //방법 1) object의 크기를 줄여줌(uid, updateProfile ,didplayName)\n    //방법 2) 버그많음 안씀\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updataProfile: (args) => user.updateProfile(args),\n    });\n  };\n\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedin={Boolean(userObj)}\n          userObj={userObj}\n        />\n      ) : (\n        \"initializing...\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport './styles.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}